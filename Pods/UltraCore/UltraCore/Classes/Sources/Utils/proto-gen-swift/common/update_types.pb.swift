// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/update_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MessagesDelivered {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var maxSeqNumber: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessagesRead {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var maxSeqNumber: UInt64 = 0

  var readTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MessagesDeleted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var range: [MessagesRange] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ChatDeleted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var lastSeqNumber: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct UserTyping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct UserAudioRecording {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct UserMediaUploading {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var userID: String = String()

  var mediaType: MediaTypeEnum = .mediaUnknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MoneyTransferStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chatID: String = String()

  var messageID: String = String()

  var transactionID: String = String()

  var status: MoneyStatus {
    get {return _status ?? MoneyStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _status: MoneyStatus? = nil
}

struct CallRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var host: String = String()

  var room: String = String()

  var accessToken: String = String()

  var sender: String = String()

  var video: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CallReject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CallCancel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var room: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Update {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: UInt64 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var ofUpdate: OneOf_OfUpdate? {
    get {return _storage._ofUpdate}
    set {_uniqueStorage()._ofUpdate = newValue}
  }

  var message: Message {
    get {
      if case .message(let v)? = _storage._ofUpdate {return v}
      return Message()
    }
    set {_uniqueStorage()._ofUpdate = .message(newValue)}
  }

  var contact: Contact {
    get {
      if case .contact(let v)? = _storage._ofUpdate {return v}
      return Contact()
    }
    set {_uniqueStorage()._ofUpdate = .contact(newValue)}
  }

  var messagesDelivered: MessagesDelivered {
    get {
      if case .messagesDelivered(let v)? = _storage._ofUpdate {return v}
      return MessagesDelivered()
    }
    set {_uniqueStorage()._ofUpdate = .messagesDelivered(newValue)}
  }

  var messagesRead: MessagesRead {
    get {
      if case .messagesRead(let v)? = _storage._ofUpdate {return v}
      return MessagesRead()
    }
    set {_uniqueStorage()._ofUpdate = .messagesRead(newValue)}
  }

  var messagesDeleted: MessagesDeleted {
    get {
      if case .messagesDeleted(let v)? = _storage._ofUpdate {return v}
      return MessagesDeleted()
    }
    set {_uniqueStorage()._ofUpdate = .messagesDeleted(newValue)}
  }

  var chatDeleted: ChatDeleted {
    get {
      if case .chatDeleted(let v)? = _storage._ofUpdate {return v}
      return ChatDeleted()
    }
    set {_uniqueStorage()._ofUpdate = .chatDeleted(newValue)}
  }

  var moneyTransferStatus: MoneyTransferStatus {
    get {
      if case .moneyTransferStatus(let v)? = _storage._ofUpdate {return v}
      return MoneyTransferStatus()
    }
    set {_uniqueStorage()._ofUpdate = .moneyTransferStatus(newValue)}
  }

  var ofPresence: OneOf_OfPresence? {
    get {return _storage._ofPresence}
    set {_uniqueStorage()._ofPresence = newValue}
  }

  var typing: UserTyping {
    get {
      if case .typing(let v)? = _storage._ofPresence {return v}
      return UserTyping()
    }
    set {_uniqueStorage()._ofPresence = .typing(newValue)}
  }

  var audioRecording: UserAudioRecording {
    get {
      if case .audioRecording(let v)? = _storage._ofPresence {return v}
      return UserAudioRecording()
    }
    set {_uniqueStorage()._ofPresence = .audioRecording(newValue)}
  }

  var userStatus: UserStatus {
    get {
      if case .userStatus(let v)? = _storage._ofPresence {return v}
      return UserStatus()
    }
    set {_uniqueStorage()._ofPresence = .userStatus(newValue)}
  }

  var mediaUploading: UserMediaUploading {
    get {
      if case .mediaUploading(let v)? = _storage._ofPresence {return v}
      return UserMediaUploading()
    }
    set {_uniqueStorage()._ofPresence = .mediaUploading(newValue)}
  }

  var callRequest: CallRequest {
    get {
      if case .callRequest(let v)? = _storage._ofPresence {return v}
      return CallRequest()
    }
    set {_uniqueStorage()._ofPresence = .callRequest(newValue)}
  }

  var callReject: CallReject {
    get {
      if case .callReject(let v)? = _storage._ofPresence {return v}
      return CallReject()
    }
    set {_uniqueStorage()._ofPresence = .callReject(newValue)}
  }

  var callCancel: CallCancel {
    get {
      if case .callCancel(let v)? = _storage._ofPresence {return v}
      return CallCancel()
    }
    set {_uniqueStorage()._ofPresence = .callCancel(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_OfUpdate: Equatable {
    case message(Message)
    case contact(Contact)
    case messagesDelivered(MessagesDelivered)
    case messagesRead(MessagesRead)
    case messagesDeleted(MessagesDeleted)
    case chatDeleted(ChatDeleted)
    case moneyTransferStatus(MoneyTransferStatus)

  #if !swift(>=4.1)
    static func ==(lhs: Update.OneOf_OfUpdate, rhs: Update.OneOf_OfUpdate) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.message, .message): return {
        guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contact, .contact): return {
        guard case .contact(let l) = lhs, case .contact(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messagesDelivered, .messagesDelivered): return {
        guard case .messagesDelivered(let l) = lhs, case .messagesDelivered(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messagesRead, .messagesRead): return {
        guard case .messagesRead(let l) = lhs, case .messagesRead(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.messagesDeleted, .messagesDeleted): return {
        guard case .messagesDeleted(let l) = lhs, case .messagesDeleted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.chatDeleted, .chatDeleted): return {
        guard case .chatDeleted(let l) = lhs, case .chatDeleted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.moneyTransferStatus, .moneyTransferStatus): return {
        guard case .moneyTransferStatus(let l) = lhs, case .moneyTransferStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum OneOf_OfPresence: Equatable {
    case typing(UserTyping)
    case audioRecording(UserAudioRecording)
    case userStatus(UserStatus)
    case mediaUploading(UserMediaUploading)
    case callRequest(CallRequest)
    case callReject(CallReject)
    case callCancel(CallCancel)

  #if !swift(>=4.1)
    static func ==(lhs: Update.OneOf_OfPresence, rhs: Update.OneOf_OfPresence) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.typing, .typing): return {
        guard case .typing(let l) = lhs, case .typing(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.audioRecording, .audioRecording): return {
        guard case .audioRecording(let l) = lhs, case .audioRecording(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userStatus, .userStatus): return {
        guard case .userStatus(let l) = lhs, case .userStatus(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mediaUploading, .mediaUploading): return {
        guard case .mediaUploading(let l) = lhs, case .mediaUploading(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callRequest, .callRequest): return {
        guard case .callRequest(let l) = lhs, case .callRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callReject, .callReject): return {
        guard case .callReject(let l) = lhs, case .callReject(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callCancel, .callCancel): return {
        guard case .callCancel(let l) = lhs, case .callCancel(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Updates {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastState: UInt64 = 0

  var count: Int64 = 0

  var updates: [Update] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MessagesDelivered: @unchecked Sendable {}
extension MessagesRead: @unchecked Sendable {}
extension MessagesDeleted: @unchecked Sendable {}
extension ChatDeleted: @unchecked Sendable {}
extension UserTyping: @unchecked Sendable {}
extension UserAudioRecording: @unchecked Sendable {}
extension UserMediaUploading: @unchecked Sendable {}
extension MoneyTransferStatus: @unchecked Sendable {}
extension CallRequest: @unchecked Sendable {}
extension CallReject: @unchecked Sendable {}
extension CallCancel: @unchecked Sendable {}
extension Update: @unchecked Sendable {}
extension Update.OneOf_OfUpdate: @unchecked Sendable {}
extension Update.OneOf_OfPresence: @unchecked Sendable {}
extension Updates: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MessagesDelivered: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessagesDelivered"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "max_seq_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxSeqNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.maxSeqNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxSeqNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagesDelivered, rhs: MessagesDelivered) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.maxSeqNumber != rhs.maxSeqNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagesRead: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessagesRead"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "max_seq_number"),
    4: .standard(proto: "read_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxSeqNumber) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.readTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.maxSeqNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxSeqNumber, fieldNumber: 3)
    }
    if self.readTime != 0 {
      try visitor.visitSingularInt64Field(value: self.readTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagesRead, rhs: MessagesRead) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.maxSeqNumber != rhs.maxSeqNumber {return false}
    if lhs.readTime != rhs.readTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MessagesDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MessagesDeleted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .same(proto: "range"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.range) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.range.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.range, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MessagesDeleted, rhs: MessagesDeleted) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.range != rhs.range {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChatDeleted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .same(proto: "lastSeqNumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lastSeqNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if self.lastSeqNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastSeqNumber, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ChatDeleted, rhs: ChatDeleted) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.lastSeqNumber != rhs.lastSeqNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UserTyping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserTyping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserTyping, rhs: UserTyping) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UserAudioRecording: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserAudioRecording"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserAudioRecording, rhs: UserAudioRecording) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UserMediaUploading: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserMediaUploading"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "user_id"),
    3: .same(proto: "mediaType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.mediaType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.mediaType != .mediaUnknown {
      try visitor.visitSingularEnumField(value: self.mediaType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UserMediaUploading, rhs: UserMediaUploading) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.mediaType != rhs.mediaType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MoneyTransferStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MoneyTransferStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_id"),
    2: .standard(proto: "message_id"),
    3: .standard(proto: "transaction_id"),
    4: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chatID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.transactionID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chatID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatID, fieldNumber: 1)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 2)
    }
    if !self.transactionID.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionID, fieldNumber: 3)
    }
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MoneyTransferStatus, rhs: MoneyTransferStatus) -> Bool {
    if lhs.chatID != rhs.chatID {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.transactionID != rhs.transactionID {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CallRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CallRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "room"),
    3: .standard(proto: "access_token"),
    4: .same(proto: "sender"),
    5: .same(proto: "video"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.host) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.room) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accessToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.video) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 1)
    }
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 2)
    }
    if !self.accessToken.isEmpty {
      try visitor.visitSingularStringField(value: self.accessToken, fieldNumber: 3)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 4)
    }
    if self.video != false {
      try visitor.visitSingularBoolField(value: self.video, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CallRequest, rhs: CallRequest) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.room != rhs.room {return false}
    if lhs.accessToken != rhs.accessToken {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.video != rhs.video {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CallReject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CallReject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
    2: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.room) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 1)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CallReject, rhs: CallReject) -> Bool {
    if lhs.room != rhs.room {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CallCancel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CallCancel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
    2: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.room) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 1)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CallCancel, rhs: CallCancel) -> Bool {
    if lhs.room != rhs.room {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Update"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    3: .same(proto: "message"),
    4: .same(proto: "contact"),
    6: .standard(proto: "messages_delivered"),
    7: .standard(proto: "messages_read"),
    11: .standard(proto: "messages_deleted"),
    12: .standard(proto: "chat_deleted"),
    14: .same(proto: "moneyTransferStatus"),
    8: .same(proto: "typing"),
    9: .same(proto: "audioRecording"),
    10: .standard(proto: "user_status"),
    13: .same(proto: "mediaUploading"),
    15: .same(proto: "callRequest"),
    16: .same(proto: "callReject"),
    17: .same(proto: "callCancel"),
  ]

  fileprivate class _StorageClass {
    var _state: UInt64 = 0
    var _ofUpdate: Update.OneOf_OfUpdate?
    var _ofPresence: Update.OneOf_OfPresence?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _ofUpdate = source._ofUpdate
      _ofPresence = source._ofPresence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._state) }()
        case 3: try {
          var v: Message?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .message(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .message(v)
          }
        }()
        case 4: try {
          var v: Contact?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .contact(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .contact(v)
          }
        }()
        case 6: try {
          var v: MessagesDelivered?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .messagesDelivered(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .messagesDelivered(v)
          }
        }()
        case 7: try {
          var v: MessagesRead?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .messagesRead(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .messagesRead(v)
          }
        }()
        case 8: try {
          var v: UserTyping?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .typing(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .typing(v)
          }
        }()
        case 9: try {
          var v: UserAudioRecording?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .audioRecording(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .audioRecording(v)
          }
        }()
        case 10: try {
          var v: UserStatus?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .userStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .userStatus(v)
          }
        }()
        case 11: try {
          var v: MessagesDeleted?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .messagesDeleted(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .messagesDeleted(v)
          }
        }()
        case 12: try {
          var v: ChatDeleted?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .chatDeleted(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .chatDeleted(v)
          }
        }()
        case 13: try {
          var v: UserMediaUploading?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .mediaUploading(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .mediaUploading(v)
          }
        }()
        case 14: try {
          var v: MoneyTransferStatus?
          var hadOneofValue = false
          if let current = _storage._ofUpdate {
            hadOneofValue = true
            if case .moneyTransferStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofUpdate = .moneyTransferStatus(v)
          }
        }()
        case 15: try {
          var v: CallRequest?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .callRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .callRequest(v)
          }
        }()
        case 16: try {
          var v: CallReject?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .callReject(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .callReject(v)
          }
        }()
        case 17: try {
          var v: CallCancel?
          var hadOneofValue = false
          if let current = _storage._ofPresence {
            hadOneofValue = true
            if case .callCancel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._ofPresence = .callCancel(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._state != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._state, fieldNumber: 1)
      }
      switch _storage._ofUpdate {
      case .message?: try {
        guard case .message(let v)? = _storage._ofUpdate else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .contact?: try {
        guard case .contact(let v)? = _storage._ofUpdate else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .messagesDelivered?: try {
        guard case .messagesDelivered(let v)? = _storage._ofUpdate else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .messagesRead?: try {
        guard case .messagesRead(let v)? = _storage._ofUpdate else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      default: break
      }
      switch _storage._ofPresence {
      case .typing?: try {
        guard case .typing(let v)? = _storage._ofPresence else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .audioRecording?: try {
        guard case .audioRecording(let v)? = _storage._ofPresence else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .userStatus?: try {
        guard case .userStatus(let v)? = _storage._ofPresence else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      default: break
      }
      switch _storage._ofUpdate {
      case .messagesDeleted?: try {
        guard case .messagesDeleted(let v)? = _storage._ofUpdate else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      case .chatDeleted?: try {
        guard case .chatDeleted(let v)? = _storage._ofUpdate else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      default: break
      }
      try { if case .mediaUploading(let v)? = _storage._ofPresence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if case .moneyTransferStatus(let v)? = _storage._ofUpdate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      switch _storage._ofPresence {
      case .callRequest?: try {
        guard case .callRequest(let v)? = _storage._ofPresence else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }()
      case .callReject?: try {
        guard case .callReject(let v)? = _storage._ofPresence else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }()
      case .callCancel?: try {
        guard case .callCancel(let v)? = _storage._ofPresence else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }()
      default: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Update, rhs: Update) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._ofUpdate != rhs_storage._ofUpdate {return false}
        if _storage._ofPresence != rhs_storage._ofPresence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Updates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Updates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_state"),
    2: .same(proto: "count"),
    4: .same(proto: "updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.lastState) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.updates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastState != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastState, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    if !self.updates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Updates, rhs: Updates) -> Bool {
    if lhs.lastState != rhs.lastState {return false}
    if lhs.count != rhs.count {return false}
    if lhs.updates != rhs.updates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
