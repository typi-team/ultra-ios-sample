//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: call_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `CallServiceClient`, then call methods of this protocol to make API calls.
internal protocol CallServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CallServiceClientInterceptorFactoryProtocol? { get }

  func create(
    _ request: CreateCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CreateCallRequest, CreateCallResponse>

  func reject(
    _ request: RejectCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RejectCallRequest, RejectCallResponse>

  func cancel(
    _ request: CancelCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CancelCallRequest, CancelCallResponse>
}

extension CallServiceClientProtocol {
  internal var serviceName: String {
    return "CallService"
  }

  /// Unary call to Create
  ///
  /// - Parameters:
  ///   - request: Request to send to Create.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create(
    _ request: CreateCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CreateCallRequest, CreateCallResponse> {
    return self.makeUnaryCall(
      path: CallServiceClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  /// Unary call to Reject
  ///
  /// - Parameters:
  ///   - request: Request to send to Reject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reject(
    _ request: RejectCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RejectCallRequest, RejectCallResponse> {
    return self.makeUnaryCall(
      path: CallServiceClientMetadata.Methods.reject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRejectInterceptors() ?? []
    )
  }

  /// Unary call to Cancel
  ///
  /// - Parameters:
  ///   - request: Request to send to Cancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancel(
    _ request: CancelCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CancelCallRequest, CancelCallResponse> {
    return self.makeUnaryCall(
      path: CallServiceClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension CallServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "CallServiceNIOClient")
internal final class CallServiceClient: CallServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CallServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: CallServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the CallService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CallServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct CallServiceNIOClient: CallServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: CallServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the CallService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CallServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol CallServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CallServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateCall(
    _ request: CreateCallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CreateCallRequest, CreateCallResponse>

  func makeRejectCall(
    _ request: RejectCallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RejectCallRequest, RejectCallResponse>

  func makeCancelCall(
    _ request: CancelCallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CancelCallRequest, CancelCallResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CallServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return CallServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: CallServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateCall(
    _ request: CreateCallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CreateCallRequest, CreateCallResponse> {
    return self.makeAsyncUnaryCall(
      path: CallServiceClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  internal func makeRejectCall(
    _ request: RejectCallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RejectCallRequest, RejectCallResponse> {
    return self.makeAsyncUnaryCall(
      path: CallServiceClientMetadata.Methods.reject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRejectInterceptors() ?? []
    )
  }

  internal func makeCancelCall(
    _ request: CancelCallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CancelCallRequest, CancelCallResponse> {
    return self.makeAsyncUnaryCall(
      path: CallServiceClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CallServiceAsyncClientProtocol {
  internal func create(
    _ request: CreateCallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CreateCallResponse {
    return try await self.performAsyncUnaryCall(
      path: CallServiceClientMetadata.Methods.create.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateInterceptors() ?? []
    )
  }

  internal func reject(
    _ request: RejectCallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RejectCallResponse {
    return try await self.performAsyncUnaryCall(
      path: CallServiceClientMetadata.Methods.reject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRejectInterceptors() ?? []
    )
  }

  internal func cancel(
    _ request: CancelCallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CancelCallResponse {
    return try await self.performAsyncUnaryCall(
      path: CallServiceClientMetadata.Methods.cancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct CallServiceAsyncClient: CallServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: CallServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CallServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol CallServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'create'.
  func makeCreateInterceptors() -> [ClientInterceptor<CreateCallRequest, CreateCallResponse>]

  /// - Returns: Interceptors to use when invoking 'reject'.
  func makeRejectInterceptors() -> [ClientInterceptor<RejectCallRequest, RejectCallResponse>]

  /// - Returns: Interceptors to use when invoking 'cancel'.
  func makeCancelInterceptors() -> [ClientInterceptor<CancelCallRequest, CancelCallResponse>]
}

internal enum CallServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CallService",
    fullName: "CallService",
    methods: [
      CallServiceClientMetadata.Methods.create,
      CallServiceClientMetadata.Methods.reject,
      CallServiceClientMetadata.Methods.cancel,
    ]
  )

  internal enum Methods {
    internal static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/CallService/Create",
      type: GRPCCallType.unary
    )

    internal static let reject = GRPCMethodDescriptor(
      name: "Reject",
      path: "/CallService/Reject",
      type: GRPCCallType.unary
    )

    internal static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/CallService/Cancel",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol CallServiceProvider: CallHandlerProvider {
  var interceptors: CallServiceServerInterceptorFactoryProtocol? { get }

  func create(request: CreateCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CreateCallResponse>

  func reject(request: RejectCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RejectCallResponse>

  func cancel(request: CancelCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CancelCallResponse>
}

extension CallServiceProvider {
  internal var serviceName: Substring {
    return CallServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Create":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CreateCallRequest>(),
        responseSerializer: ProtobufSerializer<CreateCallResponse>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        userFunction: self.create(request:context:)
      )

    case "Reject":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RejectCallRequest>(),
        responseSerializer: ProtobufSerializer<RejectCallResponse>(),
        interceptors: self.interceptors?.makeRejectInterceptors() ?? [],
        userFunction: self.reject(request:context:)
      )

    case "Cancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CancelCallRequest>(),
        responseSerializer: ProtobufSerializer<CancelCallResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        userFunction: self.cancel(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol CallServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CallServiceServerInterceptorFactoryProtocol? { get }

  func create(
    request: CreateCallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CreateCallResponse

  func reject(
    request: RejectCallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RejectCallResponse

  func cancel(
    request: CancelCallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CancelCallResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CallServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return CallServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return CallServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: CallServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Create":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CreateCallRequest>(),
        responseSerializer: ProtobufSerializer<CreateCallResponse>(),
        interceptors: self.interceptors?.makeCreateInterceptors() ?? [],
        wrapping: { try await self.create(request: $0, context: $1) }
      )

    case "Reject":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RejectCallRequest>(),
        responseSerializer: ProtobufSerializer<RejectCallResponse>(),
        interceptors: self.interceptors?.makeRejectInterceptors() ?? [],
        wrapping: { try await self.reject(request: $0, context: $1) }
      )

    case "Cancel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CancelCallRequest>(),
        responseSerializer: ProtobufSerializer<CancelCallResponse>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        wrapping: { try await self.cancel(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol CallServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'create'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateInterceptors() -> [ServerInterceptor<CreateCallRequest, CreateCallResponse>]

  /// - Returns: Interceptors to use when handling 'reject'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRejectInterceptors() -> [ServerInterceptor<RejectCallRequest, RejectCallResponse>]

  /// - Returns: Interceptors to use when handling 'cancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelInterceptors() -> [ServerInterceptor<CancelCallRequest, CancelCallResponse>]
}

internal enum CallServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CallService",
    fullName: "CallService",
    methods: [
      CallServiceServerMetadata.Methods.create,
      CallServiceServerMetadata.Methods.reject,
      CallServiceServerMetadata.Methods.cancel,
    ]
  )

  internal enum Methods {
    internal static let create = GRPCMethodDescriptor(
      name: "Create",
      path: "/CallService/Create",
      type: GRPCCallType.unary
    )

    internal static let reject = GRPCMethodDescriptor(
      name: "Reject",
      path: "/CallService/Reject",
      type: GRPCCallType.unary
    )

    internal static let cancel = GRPCMethodDescriptor(
      name: "Cancel",
      path: "/CallService/Cancel",
      type: GRPCCallType.unary
    )
  }
}
