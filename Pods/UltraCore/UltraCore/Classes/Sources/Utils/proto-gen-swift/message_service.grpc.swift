//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: message_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `MessageServiceClient`, then call methods of this protocol to make API calls.
internal protocol MessageServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: MessageServiceClientInterceptorFactoryProtocol? { get }

  func send(
    _ request: MessageSendRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MessageSendRequest, MessageSendResponse>

  func getChatMessages(
    _ request: GetChatMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetChatMessagesRequest, GetChatMessagesResponse>

  func delivered(
    _ request: MessagesDeliveredRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MessagesDeliveredRequest, MessagesDeliveredResponse>

  func read(
    _ request: MessagesReadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MessagesReadRequest, MessagesReadResponse>

  func delete(
    _ request: MessagesDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MessagesDeleteRequest, MessagesDeleteResponse>

  func complain(
    _ request: ComplainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ComplainRequest, ComplainResponse>

  func sendTyping(
    _ request: SendTypingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SendTypingRequest, SendTypingResponse>

  func sendAudioRecording(
    _ request: SendAudioRecordingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SendAudioRecordingRequest, SendAudioRecordingResponse>

  func sendMediaUploading(
    _ request: SendMediaUploadingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SendMediaUploadingRequest, SendMediaUploadingResponse>

  func getMessage(
    _ request: GetMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetMessageRequest, GetMessageResponse>
}

extension MessageServiceClientProtocol {
  internal var serviceName: String {
    return "MessageService"
  }

  /// Send one message to Peer
  ///
  /// - Parameters:
  ///   - request: Request to send to Send.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func send(
    _ request: MessageSendRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MessageSendRequest, MessageSendResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  /// Fetch chat messages in backward direction
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChatMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChatMessages(
    _ request: GetChatMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetChatMessagesRequest, GetChatMessagesResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.getChatMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatMessagesInterceptors() ?? []
    )
  }

  /// Unary call to Delivered
  ///
  /// - Parameters:
  ///   - request: Request to send to Delivered.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delivered(
    _ request: MessagesDeliveredRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MessagesDeliveredRequest, MessagesDeliveredResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.delivered.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeliveredInterceptors() ?? []
    )
  }

  /// Unary call to Read
  ///
  /// - Parameters:
  ///   - request: Request to send to Read.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func read(
    _ request: MessagesReadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MessagesReadRequest, MessagesReadResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.read.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: MessagesDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MessagesDeleteRequest, MessagesDeleteResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  /// Unary call to Complain
  ///
  /// - Parameters:
  ///   - request: Request to send to Complain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func complain(
    _ request: ComplainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ComplainRequest, ComplainResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.complain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComplainInterceptors() ?? []
    )
  }

  /// Chat presences
  ///
  /// - Parameters:
  ///   - request: Request to send to SendTyping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendTyping(
    _ request: SendTypingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SendTypingRequest, SendTypingResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendTypingInterceptors() ?? []
    )
  }

  /// Unary call to SendAudioRecording
  ///
  /// - Parameters:
  ///   - request: Request to send to SendAudioRecording.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendAudioRecording(
    _ request: SendAudioRecordingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SendAudioRecordingRequest, SendAudioRecordingResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendAudioRecording.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendAudioRecordingInterceptors() ?? []
    )
  }

  /// Send video uploading presence, should be executed when user starts
  /// uploading some media.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMediaUploading.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMediaUploading(
    _ request: SendMediaUploadingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SendMediaUploadingRequest, SendMediaUploadingResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendMediaUploading.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMediaUploadingInterceptors() ?? []
    )
  }

  /// Get message by id, if user has no access to message NotFound error will be returned
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMessage(
    _ request: GetMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetMessageRequest, GetMessageResponse> {
    return self.makeUnaryCall(
      path: MessageServiceClientMetadata.Methods.getMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension MessageServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "MessageServiceNIOClient")
internal final class MessageServiceClient: MessageServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: MessageServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: MessageServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the MessageService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MessageServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct MessageServiceNIOClient: MessageServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: MessageServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the MessageService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MessageServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol MessageServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: MessageServiceClientInterceptorFactoryProtocol? { get }

  func makeSendCall(
    _ request: MessageSendRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MessageSendRequest, MessageSendResponse>

  func makeGetChatMessagesCall(
    _ request: GetChatMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetChatMessagesRequest, GetChatMessagesResponse>

  func makeDeliveredCall(
    _ request: MessagesDeliveredRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MessagesDeliveredRequest, MessagesDeliveredResponse>

  func makeReadCall(
    _ request: MessagesReadRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MessagesReadRequest, MessagesReadResponse>

  func makeDeleteCall(
    _ request: MessagesDeleteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MessagesDeleteRequest, MessagesDeleteResponse>

  func makeComplainCall(
    _ request: ComplainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ComplainRequest, ComplainResponse>

  func makeSendTypingCall(
    _ request: SendTypingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SendTypingRequest, SendTypingResponse>

  func makeSendAudioRecordingCall(
    _ request: SendAudioRecordingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SendAudioRecordingRequest, SendAudioRecordingResponse>

  func makeSendMediaUploadingCall(
    _ request: SendMediaUploadingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SendMediaUploadingRequest, SendMediaUploadingResponse>

  func makeGetMessageCall(
    _ request: GetMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetMessageRequest, GetMessageResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension MessageServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return MessageServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: MessageServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSendCall(
    _ request: MessageSendRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MessageSendRequest, MessageSendResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  internal func makeGetChatMessagesCall(
    _ request: GetChatMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetChatMessagesRequest, GetChatMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.getChatMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatMessagesInterceptors() ?? []
    )
  }

  internal func makeDeliveredCall(
    _ request: MessagesDeliveredRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MessagesDeliveredRequest, MessagesDeliveredResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.delivered.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeliveredInterceptors() ?? []
    )
  }

  internal func makeReadCall(
    _ request: MessagesReadRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MessagesReadRequest, MessagesReadResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.read.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? []
    )
  }

  internal func makeDeleteCall(
    _ request: MessagesDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MessagesDeleteRequest, MessagesDeleteResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func makeComplainCall(
    _ request: ComplainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ComplainRequest, ComplainResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.complain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComplainInterceptors() ?? []
    )
  }

  internal func makeSendTypingCall(
    _ request: SendTypingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SendTypingRequest, SendTypingResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendTypingInterceptors() ?? []
    )
  }

  internal func makeSendAudioRecordingCall(
    _ request: SendAudioRecordingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SendAudioRecordingRequest, SendAudioRecordingResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendAudioRecording.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendAudioRecordingInterceptors() ?? []
    )
  }

  internal func makeSendMediaUploadingCall(
    _ request: SendMediaUploadingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SendMediaUploadingRequest, SendMediaUploadingResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendMediaUploading.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMediaUploadingInterceptors() ?? []
    )
  }

  internal func makeGetMessageCall(
    _ request: GetMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetMessageRequest, GetMessageResponse> {
    return self.makeAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.getMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension MessageServiceAsyncClientProtocol {
  internal func send(
    _ request: MessageSendRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessageSendResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.send.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendInterceptors() ?? []
    )
  }

  internal func getChatMessages(
    _ request: GetChatMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetChatMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.getChatMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatMessagesInterceptors() ?? []
    )
  }

  internal func delivered(
    _ request: MessagesDeliveredRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesDeliveredResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.delivered.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeliveredInterceptors() ?? []
    )
  }

  internal func read(
    _ request: MessagesReadRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesReadResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.read.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadInterceptors() ?? []
    )
  }

  internal func delete(
    _ request: MessagesDeleteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MessagesDeleteResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func complain(
    _ request: ComplainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ComplainResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.complain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComplainInterceptors() ?? []
    )
  }

  internal func sendTyping(
    _ request: SendTypingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SendTypingResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendTypingInterceptors() ?? []
    )
  }

  internal func sendAudioRecording(
    _ request: SendAudioRecordingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SendAudioRecordingResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendAudioRecording.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendAudioRecordingInterceptors() ?? []
    )
  }

  internal func sendMediaUploading(
    _ request: SendMediaUploadingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SendMediaUploadingResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.sendMediaUploading.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMediaUploadingInterceptors() ?? []
    )
  }

  internal func getMessage(
    _ request: GetMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetMessageResponse {
    return try await self.performAsyncUnaryCall(
      path: MessageServiceClientMetadata.Methods.getMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct MessageServiceAsyncClient: MessageServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: MessageServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MessageServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol MessageServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'send'.
  func makeSendInterceptors() -> [ClientInterceptor<MessageSendRequest, MessageSendResponse>]

  /// - Returns: Interceptors to use when invoking 'getChatMessages'.
  func makeGetChatMessagesInterceptors() -> [ClientInterceptor<GetChatMessagesRequest, GetChatMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'delivered'.
  func makeDeliveredInterceptors() -> [ClientInterceptor<MessagesDeliveredRequest, MessagesDeliveredResponse>]

  /// - Returns: Interceptors to use when invoking 'read'.
  func makeReadInterceptors() -> [ClientInterceptor<MessagesReadRequest, MessagesReadResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<MessagesDeleteRequest, MessagesDeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'complain'.
  func makeComplainInterceptors() -> [ClientInterceptor<ComplainRequest, ComplainResponse>]

  /// - Returns: Interceptors to use when invoking 'sendTyping'.
  func makeSendTypingInterceptors() -> [ClientInterceptor<SendTypingRequest, SendTypingResponse>]

  /// - Returns: Interceptors to use when invoking 'sendAudioRecording'.
  func makeSendAudioRecordingInterceptors() -> [ClientInterceptor<SendAudioRecordingRequest, SendAudioRecordingResponse>]

  /// - Returns: Interceptors to use when invoking 'sendMediaUploading'.
  func makeSendMediaUploadingInterceptors() -> [ClientInterceptor<SendMediaUploadingRequest, SendMediaUploadingResponse>]

  /// - Returns: Interceptors to use when invoking 'getMessage'.
  func makeGetMessageInterceptors() -> [ClientInterceptor<GetMessageRequest, GetMessageResponse>]
}

internal enum MessageServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MessageService",
    fullName: "MessageService",
    methods: [
      MessageServiceClientMetadata.Methods.send,
      MessageServiceClientMetadata.Methods.getChatMessages,
      MessageServiceClientMetadata.Methods.delivered,
      MessageServiceClientMetadata.Methods.read,
      MessageServiceClientMetadata.Methods.delete,
      MessageServiceClientMetadata.Methods.complain,
      MessageServiceClientMetadata.Methods.sendTyping,
      MessageServiceClientMetadata.Methods.sendAudioRecording,
      MessageServiceClientMetadata.Methods.sendMediaUploading,
      MessageServiceClientMetadata.Methods.getMessage,
    ]
  )

  internal enum Methods {
    internal static let send = GRPCMethodDescriptor(
      name: "Send",
      path: "/MessageService/Send",
      type: GRPCCallType.unary
    )

    internal static let getChatMessages = GRPCMethodDescriptor(
      name: "GetChatMessages",
      path: "/MessageService/GetChatMessages",
      type: GRPCCallType.unary
    )

    internal static let delivered = GRPCMethodDescriptor(
      name: "Delivered",
      path: "/MessageService/Delivered",
      type: GRPCCallType.unary
    )

    internal static let read = GRPCMethodDescriptor(
      name: "Read",
      path: "/MessageService/Read",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/MessageService/Delete",
      type: GRPCCallType.unary
    )

    internal static let complain = GRPCMethodDescriptor(
      name: "Complain",
      path: "/MessageService/Complain",
      type: GRPCCallType.unary
    )

    internal static let sendTyping = GRPCMethodDescriptor(
      name: "SendTyping",
      path: "/MessageService/SendTyping",
      type: GRPCCallType.unary
    )

    internal static let sendAudioRecording = GRPCMethodDescriptor(
      name: "SendAudioRecording",
      path: "/MessageService/SendAudioRecording",
      type: GRPCCallType.unary
    )

    internal static let sendMediaUploading = GRPCMethodDescriptor(
      name: "SendMediaUploading",
      path: "/MessageService/SendMediaUploading",
      type: GRPCCallType.unary
    )

    internal static let getMessage = GRPCMethodDescriptor(
      name: "GetMessage",
      path: "/MessageService/GetMessage",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol MessageServiceProvider: CallHandlerProvider {
  var interceptors: MessageServiceServerInterceptorFactoryProtocol? { get }

  /// Send one message to Peer
  func send(request: MessageSendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MessageSendResponse>

  /// Fetch chat messages in backward direction
  func getChatMessages(request: GetChatMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetChatMessagesResponse>

  func delivered(request: MessagesDeliveredRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MessagesDeliveredResponse>

  func read(request: MessagesReadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MessagesReadResponse>

  func delete(request: MessagesDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MessagesDeleteResponse>

  func complain(request: ComplainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ComplainResponse>

  /// Chat presences
  func sendTyping(request: SendTypingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SendTypingResponse>

  func sendAudioRecording(request: SendAudioRecordingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SendAudioRecordingResponse>

  /// Send video uploading presence, should be executed when user starts
  /// uploading some media.
  func sendMediaUploading(request: SendMediaUploadingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SendMediaUploadingResponse>

  /// Get message by id, if user has no access to message NotFound error will be returned
  func getMessage(request: GetMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetMessageResponse>
}

extension MessageServiceProvider {
  internal var serviceName: Substring {
    return MessageServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Send":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessageSendRequest>(),
        responseSerializer: ProtobufSerializer<MessageSendResponse>(),
        interceptors: self.interceptors?.makeSendInterceptors() ?? [],
        userFunction: self.send(request:context:)
      )

    case "GetChatMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetChatMessagesRequest>(),
        responseSerializer: ProtobufSerializer<GetChatMessagesResponse>(),
        interceptors: self.interceptors?.makeGetChatMessagesInterceptors() ?? [],
        userFunction: self.getChatMessages(request:context:)
      )

    case "Delivered":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessagesDeliveredRequest>(),
        responseSerializer: ProtobufSerializer<MessagesDeliveredResponse>(),
        interceptors: self.interceptors?.makeDeliveredInterceptors() ?? [],
        userFunction: self.delivered(request:context:)
      )

    case "Read":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessagesReadRequest>(),
        responseSerializer: ProtobufSerializer<MessagesReadResponse>(),
        interceptors: self.interceptors?.makeReadInterceptors() ?? [],
        userFunction: self.read(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessagesDeleteRequest>(),
        responseSerializer: ProtobufSerializer<MessagesDeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "Complain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ComplainRequest>(),
        responseSerializer: ProtobufSerializer<ComplainResponse>(),
        interceptors: self.interceptors?.makeComplainInterceptors() ?? [],
        userFunction: self.complain(request:context:)
      )

    case "SendTyping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SendTypingRequest>(),
        responseSerializer: ProtobufSerializer<SendTypingResponse>(),
        interceptors: self.interceptors?.makeSendTypingInterceptors() ?? [],
        userFunction: self.sendTyping(request:context:)
      )

    case "SendAudioRecording":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SendAudioRecordingRequest>(),
        responseSerializer: ProtobufSerializer<SendAudioRecordingResponse>(),
        interceptors: self.interceptors?.makeSendAudioRecordingInterceptors() ?? [],
        userFunction: self.sendAudioRecording(request:context:)
      )

    case "SendMediaUploading":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SendMediaUploadingRequest>(),
        responseSerializer: ProtobufSerializer<SendMediaUploadingResponse>(),
        interceptors: self.interceptors?.makeSendMediaUploadingInterceptors() ?? [],
        userFunction: self.sendMediaUploading(request:context:)
      )

    case "GetMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetMessageRequest>(),
        responseSerializer: ProtobufSerializer<GetMessageResponse>(),
        interceptors: self.interceptors?.makeGetMessageInterceptors() ?? [],
        userFunction: self.getMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol MessageServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: MessageServiceServerInterceptorFactoryProtocol? { get }

  /// Send one message to Peer
  func send(
    request: MessageSendRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MessageSendResponse

  /// Fetch chat messages in backward direction
  func getChatMessages(
    request: GetChatMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetChatMessagesResponse

  func delivered(
    request: MessagesDeliveredRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MessagesDeliveredResponse

  func read(
    request: MessagesReadRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MessagesReadResponse

  func delete(
    request: MessagesDeleteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MessagesDeleteResponse

  func complain(
    request: ComplainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ComplainResponse

  /// Chat presences
  func sendTyping(
    request: SendTypingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SendTypingResponse

  func sendAudioRecording(
    request: SendAudioRecordingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SendAudioRecordingResponse

  /// Send video uploading presence, should be executed when user starts
  /// uploading some media.
  func sendMediaUploading(
    request: SendMediaUploadingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SendMediaUploadingResponse

  /// Get message by id, if user has no access to message NotFound error will be returned
  func getMessage(
    request: GetMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetMessageResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension MessageServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return MessageServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return MessageServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: MessageServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Send":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessageSendRequest>(),
        responseSerializer: ProtobufSerializer<MessageSendResponse>(),
        interceptors: self.interceptors?.makeSendInterceptors() ?? [],
        wrapping: { try await self.send(request: $0, context: $1) }
      )

    case "GetChatMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetChatMessagesRequest>(),
        responseSerializer: ProtobufSerializer<GetChatMessagesResponse>(),
        interceptors: self.interceptors?.makeGetChatMessagesInterceptors() ?? [],
        wrapping: { try await self.getChatMessages(request: $0, context: $1) }
      )

    case "Delivered":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessagesDeliveredRequest>(),
        responseSerializer: ProtobufSerializer<MessagesDeliveredResponse>(),
        interceptors: self.interceptors?.makeDeliveredInterceptors() ?? [],
        wrapping: { try await self.delivered(request: $0, context: $1) }
      )

    case "Read":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessagesReadRequest>(),
        responseSerializer: ProtobufSerializer<MessagesReadResponse>(),
        interceptors: self.interceptors?.makeReadInterceptors() ?? [],
        wrapping: { try await self.read(request: $0, context: $1) }
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MessagesDeleteRequest>(),
        responseSerializer: ProtobufSerializer<MessagesDeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: { try await self.delete(request: $0, context: $1) }
      )

    case "Complain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ComplainRequest>(),
        responseSerializer: ProtobufSerializer<ComplainResponse>(),
        interceptors: self.interceptors?.makeComplainInterceptors() ?? [],
        wrapping: { try await self.complain(request: $0, context: $1) }
      )

    case "SendTyping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SendTypingRequest>(),
        responseSerializer: ProtobufSerializer<SendTypingResponse>(),
        interceptors: self.interceptors?.makeSendTypingInterceptors() ?? [],
        wrapping: { try await self.sendTyping(request: $0, context: $1) }
      )

    case "SendAudioRecording":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SendAudioRecordingRequest>(),
        responseSerializer: ProtobufSerializer<SendAudioRecordingResponse>(),
        interceptors: self.interceptors?.makeSendAudioRecordingInterceptors() ?? [],
        wrapping: { try await self.sendAudioRecording(request: $0, context: $1) }
      )

    case "SendMediaUploading":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SendMediaUploadingRequest>(),
        responseSerializer: ProtobufSerializer<SendMediaUploadingResponse>(),
        interceptors: self.interceptors?.makeSendMediaUploadingInterceptors() ?? [],
        wrapping: { try await self.sendMediaUploading(request: $0, context: $1) }
      )

    case "GetMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetMessageRequest>(),
        responseSerializer: ProtobufSerializer<GetMessageResponse>(),
        interceptors: self.interceptors?.makeGetMessageInterceptors() ?? [],
        wrapping: { try await self.getMessage(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol MessageServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'send'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendInterceptors() -> [ServerInterceptor<MessageSendRequest, MessageSendResponse>]

  /// - Returns: Interceptors to use when handling 'getChatMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChatMessagesInterceptors() -> [ServerInterceptor<GetChatMessagesRequest, GetChatMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'delivered'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeliveredInterceptors() -> [ServerInterceptor<MessagesDeliveredRequest, MessagesDeliveredResponse>]

  /// - Returns: Interceptors to use when handling 'read'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadInterceptors() -> [ServerInterceptor<MessagesReadRequest, MessagesReadResponse>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<MessagesDeleteRequest, MessagesDeleteResponse>]

  /// - Returns: Interceptors to use when handling 'complain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeComplainInterceptors() -> [ServerInterceptor<ComplainRequest, ComplainResponse>]

  /// - Returns: Interceptors to use when handling 'sendTyping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendTypingInterceptors() -> [ServerInterceptor<SendTypingRequest, SendTypingResponse>]

  /// - Returns: Interceptors to use when handling 'sendAudioRecording'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendAudioRecordingInterceptors() -> [ServerInterceptor<SendAudioRecordingRequest, SendAudioRecordingResponse>]

  /// - Returns: Interceptors to use when handling 'sendMediaUploading'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMediaUploadingInterceptors() -> [ServerInterceptor<SendMediaUploadingRequest, SendMediaUploadingResponse>]

  /// - Returns: Interceptors to use when handling 'getMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessageInterceptors() -> [ServerInterceptor<GetMessageRequest, GetMessageResponse>]
}

internal enum MessageServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MessageService",
    fullName: "MessageService",
    methods: [
      MessageServiceServerMetadata.Methods.send,
      MessageServiceServerMetadata.Methods.getChatMessages,
      MessageServiceServerMetadata.Methods.delivered,
      MessageServiceServerMetadata.Methods.read,
      MessageServiceServerMetadata.Methods.delete,
      MessageServiceServerMetadata.Methods.complain,
      MessageServiceServerMetadata.Methods.sendTyping,
      MessageServiceServerMetadata.Methods.sendAudioRecording,
      MessageServiceServerMetadata.Methods.sendMediaUploading,
      MessageServiceServerMetadata.Methods.getMessage,
    ]
  )

  internal enum Methods {
    internal static let send = GRPCMethodDescriptor(
      name: "Send",
      path: "/MessageService/Send",
      type: GRPCCallType.unary
    )

    internal static let getChatMessages = GRPCMethodDescriptor(
      name: "GetChatMessages",
      path: "/MessageService/GetChatMessages",
      type: GRPCCallType.unary
    )

    internal static let delivered = GRPCMethodDescriptor(
      name: "Delivered",
      path: "/MessageService/Delivered",
      type: GRPCCallType.unary
    )

    internal static let read = GRPCMethodDescriptor(
      name: "Read",
      path: "/MessageService/Read",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/MessageService/Delete",
      type: GRPCCallType.unary
    )

    internal static let complain = GRPCMethodDescriptor(
      name: "Complain",
      path: "/MessageService/Complain",
      type: GRPCCallType.unary
    )

    internal static let sendTyping = GRPCMethodDescriptor(
      name: "SendTyping",
      path: "/MessageService/SendTyping",
      type: GRPCCallType.unary
    )

    internal static let sendAudioRecording = GRPCMethodDescriptor(
      name: "SendAudioRecording",
      path: "/MessageService/SendAudioRecording",
      type: GRPCCallType.unary
    )

    internal static let sendMediaUploading = GRPCMethodDescriptor(
      name: "SendMediaUploading",
      path: "/MessageService/SendMediaUploading",
      type: GRPCCallType.unary
    )

    internal static let getMessage = GRPCMethodDescriptor(
      name: "GetMessage",
      path: "/MessageService/GetMessage",
      type: GRPCCallType.unary
    )
  }
}
