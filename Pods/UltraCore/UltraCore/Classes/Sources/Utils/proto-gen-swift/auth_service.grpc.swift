//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: auth_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `AuthServiceClient`, then call methods of this protocol to make API calls.
internal protocol AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AuthServiceClientInterceptorFactoryProtocol? { get }

  func getUserId(
    _ request: GetUserIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetUserIdRequest, GetUserIdResponse>

  func issueJwt(
    _ request: IssueJwtRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<IssueJwtRequest, IssueJwtResponse>
}

extension AuthServiceClientProtocol {
  internal var serviceName: String {
    return "AuthService"
  }

  /// Unary call to GetUserId
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserId(
    _ request: GetUserIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetUserIdRequest, GetUserIdResponse> {
    return self.makeUnaryCall(
      path: AuthServiceClientMetadata.Methods.getUserId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserIdInterceptors() ?? []
    )
  }

  /// Unary call to IssueJwt
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueJwt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issueJwt(
    _ request: IssueJwtRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<IssueJwtRequest, IssueJwtResponse> {
    return self.makeUnaryCall(
      path: AuthServiceClientMetadata.Methods.issueJwt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueJwtInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension AuthServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "AuthServiceNIOClient")
internal final class AuthServiceClient: AuthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: AuthServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: AuthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct AuthServiceNIOClient: AuthServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol AuthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: AuthServiceClientInterceptorFactoryProtocol? { get }

  func makeGetUserIDCall(
    _ request: GetUserIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetUserIdRequest, GetUserIdResponse>

  func makeIssueJwtCall(
    _ request: IssueJwtRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<IssueJwtRequest, IssueJwtResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return AuthServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: AuthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetUserIDCall(
    _ request: GetUserIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetUserIdRequest, GetUserIdResponse> {
    return self.makeAsyncUnaryCall(
      path: AuthServiceClientMetadata.Methods.getUserId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserIdInterceptors() ?? []
    )
  }

  internal func makeIssueJwtCall(
    _ request: IssueJwtRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<IssueJwtRequest, IssueJwtResponse> {
    return self.makeAsyncUnaryCall(
      path: AuthServiceClientMetadata.Methods.issueJwt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueJwtInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthServiceAsyncClientProtocol {
  internal func getUserId(
    _ request: GetUserIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetUserIdResponse {
    return try await self.performAsyncUnaryCall(
      path: AuthServiceClientMetadata.Methods.getUserId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserIdInterceptors() ?? []
    )
  }

  internal func issueJwt(
    _ request: IssueJwtRequest,
    callOptions: CallOptions? = nil
  ) async throws -> IssueJwtResponse {
    return try await self.performAsyncUnaryCall(
      path: AuthServiceClientMetadata.Methods.issueJwt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueJwtInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct AuthServiceAsyncClient: AuthServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AuthServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol AuthServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getUserId'.
  func makeGetUserIdInterceptors() -> [ClientInterceptor<GetUserIdRequest, GetUserIdResponse>]

  /// - Returns: Interceptors to use when invoking 'issueJwt'.
  func makeIssueJwtInterceptors() -> [ClientInterceptor<IssueJwtRequest, IssueJwtResponse>]
}

internal enum AuthServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "AuthService",
    methods: [
      AuthServiceClientMetadata.Methods.getUserId,
      AuthServiceClientMetadata.Methods.issueJwt,
    ]
  )

  internal enum Methods {
    internal static let getUserId = GRPCMethodDescriptor(
      name: "GetUserId",
      path: "/AuthService/GetUserId",
      type: GRPCCallType.unary
    )

    internal static let issueJwt = GRPCMethodDescriptor(
      name: "IssueJwt",
      path: "/AuthService/IssueJwt",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol AuthServiceProvider: CallHandlerProvider {
  var interceptors: AuthServiceServerInterceptorFactoryProtocol? { get }

  func getUserId(request: GetUserIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetUserIdResponse>

  func issueJwt(request: IssueJwtRequest, context: StatusOnlyCallContext) -> EventLoopFuture<IssueJwtResponse>
}

extension AuthServiceProvider {
  internal var serviceName: Substring {
    return AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetUserIdRequest>(),
        responseSerializer: ProtobufSerializer<GetUserIdResponse>(),
        interceptors: self.interceptors?.makeGetUserIdInterceptors() ?? [],
        userFunction: self.getUserId(request:context:)
      )

    case "IssueJwt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<IssueJwtRequest>(),
        responseSerializer: ProtobufSerializer<IssueJwtResponse>(),
        interceptors: self.interceptors?.makeIssueJwtInterceptors() ?? [],
        userFunction: self.issueJwt(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol AuthServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: AuthServiceServerInterceptorFactoryProtocol? { get }

  func getUserId(
    request: GetUserIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetUserIdResponse

  func issueJwt(
    request: IssueJwtRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> IssueJwtResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return AuthServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: AuthServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetUserIdRequest>(),
        responseSerializer: ProtobufSerializer<GetUserIdResponse>(),
        interceptors: self.interceptors?.makeGetUserIdInterceptors() ?? [],
        wrapping: { try await self.getUserId(request: $0, context: $1) }
      )

    case "IssueJwt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<IssueJwtRequest>(),
        responseSerializer: ProtobufSerializer<IssueJwtResponse>(),
        interceptors: self.interceptors?.makeIssueJwtInterceptors() ?? [],
        wrapping: { try await self.issueJwt(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol AuthServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getUserId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserIdInterceptors() -> [ServerInterceptor<GetUserIdRequest, GetUserIdResponse>]

  /// - Returns: Interceptors to use when handling 'issueJwt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueJwtInterceptors() -> [ServerInterceptor<IssueJwtRequest, IssueJwtResponse>]
}

internal enum AuthServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "AuthService",
    methods: [
      AuthServiceServerMetadata.Methods.getUserId,
      AuthServiceServerMetadata.Methods.issueJwt,
    ]
  )

  internal enum Methods {
    internal static let getUserId = GRPCMethodDescriptor(
      name: "GetUserId",
      path: "/AuthService/GetUserId",
      type: GRPCCallType.unary
    )

    internal static let issueJwt = GRPCMethodDescriptor(
      name: "IssueJwt",
      path: "/AuthService/IssueJwt",
      type: GRPCCallType.unary
    )
  }
}
