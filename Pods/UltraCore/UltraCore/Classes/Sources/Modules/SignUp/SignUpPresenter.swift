//
//  SignUpPresenter.swift
//  Pods
//
//  Created by Slam on 4/14/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//
  import NIO
import Foundation
import GRPC
import RxSwift

final class SignUpPresenter {
    
    private let disposeBag:DisposeBag = .init()
    private unowned let view: SignUpViewInterface
    private let appSettingsStore: AppSettingsStore
    private let wireframe: SignUpWireframeInterface
    
    private let jwtInteractor: UseCase<IssueJwtRequest, IssueJwtResponse>
    private let userIdInteractor: UseCase<GetUserIdRequest, GetUserIdResponse>
    
    
    // MARK: - Lifecycle -
    init(view: SignUpViewInterface,
         appSettingsStore: AppSettingsStore,
         wireframe: SignUpWireframeInterface,
         jwtInteractor: UseCase<IssueJwtRequest, IssueJwtResponse>,
         userIdInteractor: UseCase<GetUserIdRequest, GetUserIdResponse>) {
        self.view = view
        self.wireframe = wireframe
        self.jwtInteractor = jwtInteractor
        self.appSettingsStore = appSettingsStore
        self.userIdInteractor = userIdInteractor
    }
}

// MARK: - Extensions -
extension SignUpPresenter: SignUpPresenterInterface {
    
    func login(lastName: String, firstname: String, phone number: String) {
        var params = GetUserIdRequest()
        params.firstname = firstname
        params.lastname = lastName
        params.phone = number.trimNumber

        self.userIdInteractor.executeSingle(params: params)
            .map({ response -> IssueJwtRequest in
                var request = IssueJwtRequest()
                request.userID = response.userID
                request.deviceID = UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString
                request.device = .ios
                return request
            })
            .flatMap({ [weak self] request -> Single<IssueJwtResponse> in
                guard let `self` = self else {
                    return .never()
                }
                self.appSettingsStore.store(userID: request.userID)
                return self.jwtInteractor.executeSingle(params: request)
            }).do(onSuccess: { [weak self] response in
                guard let `self` = self else { return }
                self.appSettingsStore.store(token: response.token)
            })
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe(onSuccess: { [weak self] response in
                guard let `self` = self else { return }
                self.wireframe.navigateToContacts()
            }, onFailure: { error in
                print("error \(error.localizedDescription)")
            })
            .disposed(by: self.disposeBag)
    }
    
}


fileprivate extension SignUpPresenter {

}
