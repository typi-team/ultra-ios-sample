//
//  SignUpViewController.swift
//  Pods
//
//  Created by Slam on 4/14/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import SnapKit

final class SignUpViewController: BaseViewController<SignUpPresenterInterface> {

    fileprivate let logoImage = UIImageView({
        $0.contentMode = .scaleAspectFit
    })

    fileprivate let scrollView = UIScrollView({
        $0.translatesAutoresizingMaskIntoConstraints = false
    })

    fileprivate lazy var nextButton = ElevatedButton({
        $0.setTitle("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", for: .normal)
        $0.addAction {[weak self] in
            guard let `self` = self,
                  let phone = self.phoneTextField.text,
                  let lastname = self.lastTextField.text,
                  let firstname = self.firstTextField.text,
                  !firstname.isEmpty, !lastname.isEmpty else { return }
            self.presenter?.login(lastName: lastname, firstname: firstname, phone: phone)
        }
    })

    fileprivate lazy var phoneTextField = PhoneNumberTextField({
        $0.backgroundColor = .white
        $0.font = .defaultRegularBody
        $0.placeholder = "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        $0.changesCallback = {[weak self] in
            self?.handleButtonEnabling()
        }
        $0.placeholderColor = .gray500
    })

    fileprivate lazy var firstTextField = CustomTextField({
        $0.backgroundColor = .white
        $0.placeholder = "–í–∞—à–µ –∏–º—è"
        $0.font = .defaultRegularBody
        $0.placeholderColor = .gray500
        $0.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        $0.addAction(for: .editingDidEndOnExit) {[weak self] in
            self?.lastTextField.becomeFirstResponder()
        }
    })

    fileprivate lazy var lastTextField = CustomTextField({
        $0.returnKeyType = .done
        $0.backgroundColor = .white
        $0.font = .defaultRegularBody
        $0.placeholder = "–ù–∏–∫–Ω–µ–π–º"
        $0.placeholderColor = .gray500
        $0.addAction(for: .editingDidEndOnExit) {[weak self] in
            self?.view.endEditing(true)
        }
    })
    
    fileprivate let stackView = UIStackView({
        $0.axis = .vertical
        $0.translatesAutoresizingMaskIntoConstraints = false
    })
    
    fileprivate let headlineText = RegularCallout({
        $0.numberOfLines = 0
        $0.textAlignment = .center
    })
    
    override func setupViews() {
        
        super.setupViews()
                
        self.navigationItem.title = ""
        
        self.handleKeyboardTransmission = true
        
        self.view.addSubview(scrollView)
        
        self.scrollView.addSubview(stackView)
        self.stackView.addArrangedSubview(logoImage)
        self.stackView.setCustomSpacing(kHeadlinePadding * 3, after: logoImage)
        self.stackView.addArrangedSubview(headlineText)
        self.stackView.setCustomSpacing(kHeadlinePadding, after: headlineText)
        
        self.stackView.addArrangedSubview(phoneTextField)
        self.stackView.setCustomSpacing(kLowPadding, after: phoneTextField)
        let phoneHint = RegularFootnote({ $0.text = "       " + "–ù–∞–ø—Ä–∏–º–µ—Ä +77761595595" })
        self.stackView.addArrangedSubview(phoneHint)
        self.stackView.setCustomSpacing(kHeadlinePadding, after: phoneHint)
        
        self.stackView.addArrangedSubview(firstTextField)
        self.stackView.setCustomSpacing(kLowPadding, after: firstTextField)
        let firstHint = RegularFootnote({ $0.text = "       " + "–ù–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω" })
        self.stackView.addArrangedSubview(firstHint)
        self.stackView.setCustomSpacing(kHeadlinePadding, after: firstHint)
        
        self.stackView.addArrangedSubview(lastTextField)
        self.stackView.setCustomSpacing(kLowPadding, after: lastTextField)
        let lastHint = RegularFootnote({ $0.text = "       " + "nickname_ff" })
        self.stackView.addArrangedSubview(lastHint)
        self.stackView.setCustomSpacing(kHeadlinePadding * 2, after: lastHint)
        
        let nextStack = UIStackView({
            $0.alignment = .center
            $0.distribution = .equalCentering
            
            $0.addArrangedSubview(UIView())
            $0.addArrangedSubview(nextButton)
            $0.addArrangedSubview(UIView())
        })
        self.stackView.addArrangedSubview(nextStack)
        self.stackView.setCustomSpacing(kHeadlinePadding * 2, after: nextStack)
        
    }

    override func setupConstraints() {
        super.setupConstraints()

        self.scrollView.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(kMediumPadding)
            make.leading.equalTo(view.safeAreaLayoutGuide.snp.leading)
            make.trailing.equalTo(view.safeAreaLayoutGuide.snp.trailing)
            make.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom).offset(-kMediumPadding)
        }

        self.stackView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
            make.width.equalToSuperview()
        }
        
        self.headlineText.snp.makeConstraints { make in
            make.left.equalToSuperview().offset(kHeadlinePadding)
            make.right.equalToSuperview().offset(-kHeadlinePadding)
        }
        
        self.logoImage.snp.makeConstraints { make in
            make.height.equalTo(kHeadlinePadding * 2)
            make.width.equalTo(168)
        }
        
        self.nextButton.snp.makeConstraints { make in
            make.height.equalTo(kLowPadding * 8)
            make.left.equalTo(kHeadlinePadding)
            make.right.equalTo(-kHeadlinePadding)
        }
    }
    
    override func textFieldDidChange(_ sender: UITextField) {
        self.handleButtonEnabling()
    }
    override func changed(keyboard height: CGFloat) {
        self.scrollView.contentInset = .init(top: 0, left: 0, bottom: height, right: 0)
    }
    
    override func setupInitialData() {
        super.setupInitialData()
        self.handleButtonEnabling()
        self.logoImage.image = .named("ff_logo_text")
        self.headlineText.text = "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç —Å–µ—Ä–≤–∏—Å–µ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ"
        let userDef = UserDefaults.standard
        if let lastname = userDef.string(forKey: "last_name"),
           let firstname = userDef.string(forKey: "first_name"),
           let phone = userDef.string(forKey: "phone") {
            self.presenter?.login(lastName: lastname, firstname: firstname, phone: phone)
        } else {
//            self.presenter?.login(lastName: "Test", firstname: "test", phone: "+77756043111")
        }
    }
}

extension SignUpViewController: SignUpViewInterface {
    func open(view controller: UIViewController) {
        self.navigationController?.pushViewController(controller, animated: true)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2, execute: {
            self.navigationController?.viewControllers.removeAll(where: {$0 == self})
        })
    }
    
}

extension SignUpViewController {
    func handleButtonEnabling() {
        let isEnabled = (self.phoneTextField.text ?? "").count > 5 && (self.firstTextField.text ?? "").count > 1
        self.nextButton.isEnabled = isEnabled
        self.nextButton.backgroundColor = isEnabled ? .green600 : .green100
    }
}
