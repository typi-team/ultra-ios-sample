//
//  MoneyTransferPresenter.swift
//  Pods
//
//  Created by Slam on 8/18/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//
import RxSwift
import Foundation

public struct MoneyTransfer {
    let amout: Int64
    let currency: String
    let transactionID: String
}

public typealias MoneyCallback = (MoneyTransfer) -> Void


final class MoneyTransferPresenter {

    // MARK: - Private properties -
    
    fileprivate let resultCallback: MoneyCallback

    private unowned let view: MoneyTransferViewInterface
    private let wireframe: MoneyTransferWireframeInterface

    fileprivate let userID: String
    fileprivate let disposeBag = DisposeBag()
    fileprivate let conversation: Conversation
    fileprivate let appStore: AppSettingsStore
    fileprivate let sendMoneyInteractor: UseCase<TransferPayload, TransferResponse>
    
    // MARK: - Lifecycle -

    init(userID: String,
         conversation: Conversation,
         appStore: AppSettingsStore,
         view: MoneyTransferViewInterface,
         resultCallback: @escaping MoneyCallback,
         wireframe: MoneyTransferWireframeInterface,
         sendMoneyInteractor: UseCase<TransferPayload, TransferResponse>) {
        self.view = view
        self.userID = userID
        self.appStore = appStore
        self.wireframe = wireframe
        self.conversation = conversation
        self.resultCallback = resultCallback
        self.sendMoneyInteractor = sendMoneyInteractor
    }
    
    fileprivate let currency: String = "USD"
    
    func send(money amount: Double, callback: @escaping VoidCallback) {
        guard let receiver = self.conversation.peer?.userID else { return }
        let moneyParams = TransferPayload(sender: self.appStore.userID(),
                                          receiver: receiver,
                                          amount: amount,
                                          currency: currency)

        self.sendMoneyInteractor
            .executeSingle(params: moneyParams)
            .do(onSuccess: { [weak self] response in
                guard let `self` = self else { return }
                let value: MoneyTransfer = .init(amout: Int64(amount),
                                                 currency: currency,
                                                 transactionID: response.transaction_id)
                self.resultCallback(value)
                callback()
            })
            .subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background))
            .observe(on: MainScheduler.instance)
            .subscribe()
            .disposed(by: disposeBag)
    }
}

// MARK: - Extensions -

extension MoneyTransferPresenter: MoneyTransferPresenterIntrerface {
}
