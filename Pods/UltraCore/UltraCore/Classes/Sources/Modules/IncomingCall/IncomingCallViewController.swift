//
//  IncomingCallViewController.swift
//  Pods
//
//  Created by Slam on 9/4/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
//import LiveKitClient

final class IncomingCallViewController: BaseViewController<IncomingCallPresenterInterface> {
    
//    fileprivate lazy var room = Room(delegate: self)
//    fileprivate lazy var timer: Timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true, block: {[weak self] timer in
//        self?.dutationLabel.text = timer.tolerance.description
//    })
//
//    fileprivate lazy var localVideoView: VideoView = .init({
//        $0.cornerRadius = kLowPadding
//    })
//
//    fileprivate lazy var remoteVideoView: VideoView = .init({
//        $0.cornerRadius = kLowPadding
//    })
//
//    fileprivate lazy var videosStackView: UIStackView = .init {
//        $0.addArrangedSubview(self.localVideoView)
//        $0.addArrangedSubview(self.remoteVideoView)
//        $0.spacing = kLowPadding
//        $0.distribution = .fillEqually
//        $0.axis = .vertical
//    }
//
//    fileprivate lazy var style: CallPageStyle = UltraCoreStyle.callingConfig
//
//    fileprivate lazy var avatarView: UIImageView = .init {
//        $0.borderWidth = 0
//        $0.cornerRadius = 40
//        $0.backgroundColor = .white
//    }
//
//    fileprivate lazy var companionLabel: HeadlineBody = .init {
//        $0.textAlignment = .center
//        $0.font = self.style.companionConfig.font
//        $0.textColor = self.style.companionConfig.color
//    }
//
//    fileprivate lazy var dutationLabel: RegularBody = .init {
//        $0.textAlignment = .center
//        $0.font = self.style.durationConfig.font
//        $0.textColor = self.style.durationConfig.color
//    }
//
//    fileprivate lazy var answerButton: UIButton = .init {
//        $0.setImage(self.style.answerImage, for: .normal)
//        $0.addAction { [weak self] in
//            guard let `self` = self, let callInfo = self.presenter?.viewDidLoad() else { return }
//            self.connect(with: callInfo.callInfo)
//        }
//    }
//
//
//    fileprivate lazy var mouthpieceButton: UIButton = .init {
//        $0.setImage(self.style.mouthpieceOnImage, for: .normal)
//        $0.addAction { [weak self] in
//            guard let `self` = self else { return }
//            let isOn = self.mouthpieceButton.imageView?.image == self.style.mouthpieceOnImage
//            let image =  isOn ? self.style.mouthpieceOffImage : self.style.mouthpieceOnImage
//            self.mouthpieceButton.setImage(image, for: .normal)
////            self.room.localParticipant?.isSpeaking = !isOn
//        }
//    }
//
//    fileprivate lazy var microButton: UIButton = .init {
//        $0.setImage(self.style.micOnImage, for: .normal)
//        $0.addAction { [weak self] in
//            guard let `self` = self else { return }
//            let isOn = self.microButton.imageView?.image == self.style.micOnImage
//            let image =  isOn ? self.style.micOffImage : self.style.micOnImage
//            self.microButton.setImage(image, for: .normal)
//            _ = self.room.localParticipant?.set(source: .microphone, enabled: !isOn)
//        }
//    }
//
//    fileprivate lazy var cameraButton: UIButton = .init {
//        $0.setImage(self.style.cameraOffImage, for: .normal)
//        $0.addAction { [weak self] in
//            guard let `self` = self else { return }
//            let isOn = self.cameraButton.imageView?.image == self.style.cameraOnImage
//            let image =  isOn ? self.style.cameraOffImage : self.style.cameraOnImage
//            self.cameraButton.setImage(image, for: .normal)
//            _ = self.room.localParticipant?.set(source: .camera, enabled: !isOn)
//        }
//    }
//
//    fileprivate lazy var cancelButton: UIButton = .init {
//        $0.setImage(self.style.declineImage, for: .normal)
//        $0.addAction { [weak self] in
//            guard let `self` = self else { return }
//            self.dutationLabel.text = "Close connection"
//            self.presenter?.cancel()
//        }
//    }
//
//    fileprivate lazy var rejectButton: UIButton = .init {
//        $0.setImage(self.style.declineImage, for: .normal)
//        $0.addAction { [weak self] in
//            guard let `self` = self else { return }
//            self.dutationLabel.text = "Reject connection"
//            self.presenter?.reject()
//
//        }
//    }
//
//    fileprivate lazy var actionButtonsStackView: UIStackView = .init {
//        $0.axis = .horizontal
//        $0.spacing = kMediumPadding
//        $0.distribution = .equalCentering
//    }
//
//    override func setupViews() {
//        super.setupViews()
//
//        self.view.backgroundColor = self.style.background.color
//
//        self.view.addSubview(videosStackView)
//        self.view.addSubview(avatarView)
//        self.view.addSubview(companionLabel)
//        self.view.addSubview(dutationLabel)
//        self.view.addSubview(actionButtonsStackView)
//    }
//
//    override func setupConstraints() {
//        super.setupConstraints()
//
//        self.avatarView.snp.makeConstraints { make in
//            make.top.equalToSuperview().offset(kMediumPadding * 4)
//            make.centerX.equalToSuperview()
//            make.width.height.equalTo(80)
//        }
//
//        self.companionLabel.snp.makeConstraints { make in
//            make.centerX.equalToSuperview()
//            make.top.equalTo(self.avatarView.snp.bottom).offset(kLowPadding)
//            make.left.equalToSuperview().offset(kLowPadding)
//            make.right.equalToSuperview().offset(-kLowPadding)
//        }
//
//        self.dutationLabel.snp.makeConstraints { make in
//            make.centerX.equalToSuperview()
//            make.top.equalTo(self.companionLabel.snp.bottom).offset(kLowPadding)
//            make.left.equalToSuperview().offset(kLowPadding)
//            make.right.equalToSuperview().offset(-kLowPadding)
//        }
//
//        self.actionButtonsStackView.snp.makeConstraints { make in
//            make.bottom.equalToSuperview().offset(-54)
//            make.left.equalToSuperview().offset(kHeadlinePadding)
//            make.right.equalToSuperview().offset(-kHeadlinePadding)
//            make.height.equalTo(52)
//        }
//
//        self.videosStackView.snp.makeConstraints { make in
//            make.edges.equalToSuperview()
//        }
//    }
//
//    override func setupInitialData() {
//        super.setupInitialData()
//
//        guard let status = self.presenter?.viewDidLoad() else { return }
//
//        self.actionButtonsStackView.subviews.forEach({ $0.removeFromSuperview() })
//
//        switch status {
//        case let .incoming(request):
//            self.actionButtonsStackView.addArrangedSubview(self.answerButton)
//            self.actionButtonsStackView.addArrangedSubview(self.rejectButton)
//            self.room.localParticipant?.setCamera(enabled: request.video)
//        case let .outcoming(request):
//
//            self.actionButtonsStackView.addArrangedSubview(self.mouthpieceButton)
//            self.actionButtonsStackView.addArrangedSubview(self.microButton)
//            self.actionButtonsStackView.addArrangedSubview(self.cameraButton)
//            self.actionButtonsStackView.addArrangedSubview(self.cancelButton)
//
//            self.room.localParticipant?.setCamera(enabled: request.video)
//        }
//    }
//
//    deinit {
//        _ = self.room.disconnect()
//    }
}

// MARK: - Extensions -

extension IncomingCallViewController: IncomingCallViewInterface {
    func disconnectRoom() {
//        self.room.disconnect().then({[weak self] () in
//            self?.navigationController?.popViewController(animated: true)
//        }).catch { [weak self] error  in
//            self?.navigationController?.popViewController(animated: true)
//        }
    }

    func dispay(view contact: ContactDisplayable) {
//
//        self.avatarView.config(contact: contact)
//        self.companionLabel.text = contact.displaName
    }
}

//extension IncomingCallViewController: RoomDelegateObjC {
//    func room(_ room: Room, didUpdate connectionState: ConnectionStateObjC, oldValue oldConnectionState: ConnectionStateObjC) {
//        DispatchQueue.main.async {
//            self.dutationLabel.text = connectionState.desctiption
//            switch connectionState {
//            case .disconnected, .connecting, .reconnecting:
//                self.timer.invalidate()
//            case .connected:
//                self.timer.fire()
//            }
//        }
//    }
//
//    func room(_ room: Room, didUpdate metadata: String?) {
//        PP.debug(metadata ?? "as")
//    }
//
//    func room(_ room: Room, localParticipant: LocalParticipant, didPublish publication: LocalTrackPublication) {
//        guard let track = publication.track as? VideoTrack else {
//              return
//          }
//          DispatchQueue.main.async {
//              self.localVideoView.track = track
//          }
//      }
//
//      func room(_ room: Room, participant: RemoteParticipant, didSubscribe publication: RemoteTrackPublication, track: Track) {
//          guard let track = track as? VideoTrack else {
//            return
//          }
//          DispatchQueue.main.async {
//              self.remoteVideoView.track = track
//          }
//      }
//}

//private extension IncomingCallViewController {
//    func connect(with callInfo: CallInformation) {
//        self.room.connect(callInfo.host, callInfo.accessToken).then { [weak self] room in
//            guard let `self` = self else { return }
//
//            self.actionButtonsStackView.subviews.forEach({$0.removeFromSuperview()})
//
//            self.actionButtonsStackView.addArrangedSubview(self.mouthpieceButton)
//            self.actionButtonsStackView.addArrangedSubview(self.microButton)
//            self.actionButtonsStackView.addArrangedSubview(self.cameraButton)
//            self.actionButtonsStackView.addArrangedSubview(self.cancelButton)
//
//            room.localParticipant?.setCamera(enabled: callInfo.video)
//            room.localParticipant?.setMicrophone(enabled: true)
//        }.catch { error in
//            self.dismiss(animated: true)
//        }
//    }
//}

//private extension ConnectionStateObjC {
//    var desctiption: String {
//        switch self {
//        case .connected:return CallStrings.connected.localized
//        case .disconnected:
//            return CallStrings.disconnected.localized
//        case .connecting:
//            return CallStrings.connecting.localized
//        case .reconnecting:
//            return CallStrings.reconnecting.localized
//        }
//    }
//}
