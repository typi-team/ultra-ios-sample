//
//  IncomingCallPresenter.swift
//  Pods
//
//  Created by Slam on 9/4/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift



final class IncomingCallPresenter {

    // MARK: - Private properties -
    
    fileprivate let callService: CallServiceClientProtocol
    
    fileprivate lazy var disposeBag: DisposeBag = .init()

    private unowned let view: IncomingCallViewInterface
    
    fileprivate let contactInteractor: ContactByUserIdInteractor
    fileprivate let contactService: ContactDBService
    fileprivate let userId: String
    
    private let wireframe: IncomingCallWireframeInterface
    fileprivate let callStatus: CallStatus
    // MARK: - Lifecycle -

    init(userId: String,
         callInformation: CallStatus,
         view: IncomingCallViewInterface,
         contactService: ContactDBService,
         callService: CallServiceClientProtocol,
         wireframe: IncomingCallWireframeInterface,
         contactInteractor: ContactByUserIdInteractor) {
        self.view = view
        self.userId = userId
        self.wireframe = wireframe
        self.callService = callService
        self.contactService = contactService
        self.callStatus = callInformation
        self.contactInteractor = contactInteractor
    }
}

// MARK: - Extensions -

extension IncomingCallPresenter: IncomingCallPresenterInterface {
    
    func reject() {
        
        self.callService.reject(RejectCallRequest.with({
            $0.room = self.callStatus.callInfo.room
            $0.callerUserID = self.callStatus.callInfo.sender
        }), callOptions: .default()).response.whenComplete( { [weak self] result  in
            guard let `self` = self else { return }
            self.view.disconnectRoom()
            switch result {
            case .success(let response):
                PP.info(response.textFormatString())
            case .failure(let error):
                PP.error(error.localizedDescription)
            }
        })
    }
    
    func cancel() {
        
        self.callService.cancel(CancelCallRequest.with({
            $0.userID = self.userId
            $0.room = self.callStatus.callInfo.room
        }), callOptions: .default()).response.whenComplete( {[weak self] result  in
            guard let `self` = self else { return }
            switch result {
            case .success:
                self.view.disconnectRoom()
            case .failure(let error):
                PP.error(error.localizedDescription)
                self.view.disconnectRoom()
            }
        })
    }
    
    func viewDidLoad() -> CallStatus {
        if let contact = self.contactService.contact(id: self.callStatus.callInfo.sender) {
            self.view.dispay(view: contact)
        } else {
//            self.contactInteractor
//                .executeSingle(params: self.callStatus.callInfo.sender)
//                .flatMap({ self.contactService.save(contact: DBContact(from: $0, chatId: )).map({ $0 }) })
//                .observe(on: ConcurrentDispatchQueueScheduler(qos: .background))
//                .subscribe(on: MainScheduler.asyncInstance)
//                .subscribe(onSuccess: { [weak self] contact in
//                    guard let `self` = self, let contact = self.contactService.contact(id: callStatus.callInfo.sender) else { return }
//                    self.view.dispay(view: contact)
//                })
//                .disposed(by: disposeBag)
        }
        return self.callStatus
    }
}
