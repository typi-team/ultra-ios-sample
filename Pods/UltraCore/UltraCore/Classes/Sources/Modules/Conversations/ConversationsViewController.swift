//
//  ConversationsViewController.swift
//  Pods
//
//  Created by Slam on 4/20/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import RxDataSources



final class ConversationsViewController: BaseViewController<ConversationsPresenterInterface> {

    fileprivate lazy var permissionData = PermissionStateViewData(imageName: "conversations_centered_card",
                                                                  headline: "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π",
                                                                  subline: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.")
    fileprivate lazy var backgroundView: PermissionStateView = .init(data: permissionData)
    
    fileprivate lazy var tableView: UITableView = {
        if #available(iOS 13.0, *) {
            return .init(frame: .zero, style: .insetGrouped)
        } else {
            return .init()
        }
    }()
    
    override func setupViews() {
        super.setupViews()
        
        self.view.addSubview(tableView)
        self.tableView.rowHeight = 64
        self.tableView.backgroundColor = nil
        self.tableView.sectionHeaderHeight = 0
        self.tableView.registerCell(type: ConversationCell.self)
        self.tableView.separatorInset = .init(top: 0, left: kMediumPadding * 2, bottom: 0, right: kMediumPadding)
        self.navigationItem.rightBarButtonItem = .init(image: .named("conversation_new_icon"),
                                                       style: .plain, target: self,
                                                       action: #selector(self.openContacts))
        
        self.navigationItem.title = ConversationsStrings.chats.localized
        self.hidesBottomBarWhenPushed = false
    }
    
    override func setupConstraints() {
        super.setupConstraints()
        self.tableView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    override func setupInitialData() {
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2, execute: {[weak self] in
            self?.presenter?.retrieveContactStatuses()
        })
        
        NotificationCenter.default.addObserver(self, selector: #selector(didEnterBackground(_:)), name: UIApplication.didEnterBackgroundNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(willEnterForeground(_:)), name: UIApplication.willEnterForegroundNotification, object: nil)
        
        self.presenter?.setupUpdateSubscription()
        self.presenter?.conversation
            .subscribe(on: MainScheduler.instance)
            .observe(on: MainScheduler.instance)
            .do(onNext: {[weak self] conversations in
                guard let `self` = self else { return }
                if conversations.isEmpty {
                    self.tableView.backgroundView = backgroundView
                } else {
                    self.tableView.backgroundView = nil
                }
            })
            .bind(to: tableView.rx.items) { tableView, index, model in
                let cell: ConversationCell = tableView.dequeueCell()
                cell.setup(conversation: model)
                return cell
            }
            .disposed(by: self.disposeBag)
        
        self.tableView
            .rx.itemSelected
            .subscribe { [weak self] (index: IndexPath) in
                guard let `self` = self else { return }
                self.tableView.deselectRow(at: index, animated: true)
            }
            .disposed(by: disposeBag)
        
        self.tableView
            .rx
            .modelDeleted(Conversation.self)
            .subscribe(onNext: {[weak self] conversation in
                guard let `self` = self else { return }
                let alert = UIAlertController.init(title: "–í—ã —É–≤–µ—Ä–µ–Ω—ã?", message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã, –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º", preferredStyle: .actionSheet)
                alert.addAction(.init(title: "–£–¥–∞–ª–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö", style: .destructive, handler: { _ in
                    self.presenter?.delete(conversation, all: true)
                }))
                alert.addAction(.init(title: "–£–¥–∞–ª–∏—Ç—å —É –º–µ–Ω—è", style: .destructive, handler: { _ in
                    self.presenter?.delete(conversation, all: false)
                }))
                alert.addAction(.init(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
                self.present(alert, animated: true)
            })
            .disposed(by: disposeBag)
        
        self.tableView.rx
            .modelSelected(Conversation.self)
            .subscribe { [weak self](conversation: Conversation) in
                guard let `self` = self else { return }
                self.presenter?.navigate(to: conversation)
            }
            .disposed(by: disposeBag)
    }
}

// MARK: - Extensions -

extension ConversationsViewController {
    @objc func openContacts(_ sender: Any) {
        self.presenter?.navigateToContacts()
    }
}

extension ConversationsViewController: ConversationsViewInterface {}

extension ConversationsViewController {
    
    @objc func willEnterForeground(_ sender: Any) {
        self.presenter?.updateStatus(is: true)
        self.presenter?.retrieveContactStatuses()
    }
    
    @objc func didEnterBackground(_ sender: Any) {
        self.presenter?.updateStatus(is: false)
    }
}
